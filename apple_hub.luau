--[[
 Apple Themed Hub UI (Light/Dark) – Minimal, clean, adaptive
 Author: Generated by AI (GitHub Copilot)

 Goals:
  * Token based theme (light + dark) inspired by macOS / iOS design language
  * Reusable components: Button, Card, NavBar, Modal, IconButton
  * Subtle depth: layered translucency + soft shadow + rounded corners
  * Accessible: scalable text, focus ring, keyboard navigation, high-contrast friendly
  * Smooth animations: hover / press scale, fade + slide transitions

 Usage:
  local Hub = require(path.to.apple_hub)
  Hub.mount() -- returns controller table
  Hub.toggleDarkMode()

 Notes:
  No external dependencies. Safe to integrate alongside existing UI without collisions.
  All instances live under ScreenGui "AppleHubUI". Destroy via Hub.unmount().
]]

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer

-- NOTE: Removed Luau 'export type' for executor compatibility.
local Themes = {
    light = {
        backgroundPrimary   = Color3.fromRGB(245,246,248), -- subtle off‑white
        backgroundSecondary = Color3.fromRGB(235,237,240),
        backgroundElevated  = Color3.fromRGB(255,255,255),
        backgroundGlass     = Color3.fromRGB(255,255,255),
        stroke              = Color3.fromRGB(210,213,218),
        divider             = Color3.fromRGB(225,228,232),
        shadow              = Color3.fromRGB(0,0,0),
        textPrimary         = Color3.fromRGB(20,22,25),
        textSecondary       = Color3.fromRGB(95,99,105),
        accent              = Color3.fromRGB(0,122,255),   -- iOS system blue
        accentAlt           = Color3.fromRGB(52,199,89),   -- system green
        success             = Color3.fromRGB(52,199,89),
        warning             = Color3.fromRGB(255,149,0),
        danger              = Color3.fromRGB(255,59,48),
    },
    dark = {
        backgroundPrimary   = Color3.fromRGB(20,20,22),
        backgroundSecondary = Color3.fromRGB(32,33,36),
        backgroundElevated  = Color3.fromRGB(40,41,44),
        backgroundGlass     = Color3.fromRGB(40,41,44),
        stroke              = Color3.fromRGB(70,72,75),
        divider             = Color3.fromRGB(55,56,59),
        shadow              = Color3.fromRGB(0,0,0),
        textPrimary         = Color3.fromRGB(240,242,245),
        textSecondary       = Color3.fromRGB(155,158,162),
        accent              = Color3.fromRGB(10,132,255),
        accentAlt           = Color3.fromRGB(48,209,88),
        success             = Color3.fromRGB(48,209,88),
        warning             = Color3.fromRGB(255,159,10),
        danger              = Color3.fromRGB(255,69,58),
    }
}

local Typography = {
    font = Enum.Font.SourceSans, -- substitute for SF
    scale = 1.0,
    sizes = {
        title = 22,
        heading = 18,
        body = 15,
        caption = 13,
    }
}

-- Attribute compatibility shim: some executors may not allow :SetAttribute / :GetAttribute
-- We'll maintain our own weak maps for semantic roles (text) and layers (background surfaces).
local roleMap = setmetatable({}, {__mode = "k"}) -- instance -> role string
local layerMap = setmetatable({}, {__mode = "k"}) -- instance -> layer string
local function markRole(inst, role)
    if inst then roleMap[inst] = role end
end
local function markLayer(inst, layer)
    if inst then layerMap[inst] = layer end
end

-- Simple preference persistence (executor-friendly): will use writefile if available, else getgenv.
local Prefs = {
    fileName = "apple_hub_prefs.json",
    data = { theme = "light", scale = 1.0, reducedMotion = false }
}

local function loadPrefs()
    pcall(function()
        if writefile and isfile and isfile(Prefs.fileName) then
            local raw = readfile(Prefs.fileName)
            local ok, decoded = pcall(game.HttpGet, game, raw) -- bogus to keep size? we'll do JSON decode manually
        end
    end)
    -- fallback using pcall/HttpService
    local HttpService = game:GetService("HttpService")
    if writefile and isfile and isfile(Prefs.fileName) then
        local ok, decoded = pcall(function()
            return HttpService:JSONDecode(readfile(Prefs.fileName))
        end)
        if ok and decoded then
            for k,v in pairs(decoded) do
                Prefs.data[k] = v
            end
        end
    elseif getgenv then
        local g = getgenv()
        g.__APPLE_HUB_PREFS = g.__APPLE_HUB_PREFS or Prefs.data
        Prefs.data = g.__APPLE_HUB_PREFS
    end
end

local function savePrefs()
    local HttpService = game:GetService("HttpService")
    Prefs.data.theme = Prefs.data.theme or "light"
    Prefs.data.scale = Typography.scale
    if writefile then
        pcall(function()
            writefile(Prefs.fileName, HttpService:JSONEncode(Prefs.data))
        end)
    elseif getgenv then
        getgenv().__APPLE_HUB_PREFS = Prefs.data
    end
end

loadPrefs()
if Prefs.data.scale and type(Prefs.data.scale) == "number" then
    Typography.scale = Prefs.data.scale
end

-- Utility --------------------------------------------------------------------
-- Simplified signature (removed typed params for broad executor support)
local function tween(o, props, dur, ease, dir)
    TweenService:Create(o, TweenInfo.new(dur or 0.25, ease or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out), props):Play()
end

local function rounded(parent, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius)
    c.Parent = parent
    return c
end

local function stroke(parent, color, thickness, transparency)
    local s = Instance.new("UIStroke")
    s.Thickness = thickness
    s.Color = color
    s.Transparency = transparency or 0
    s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    s.Parent = parent
    return s
end

local function padding(parent, px)
    local p = Instance.new("UIPadding")
    p.PaddingTop = UDim.new(0, px)
    p.PaddingBottom = UDim.new(0, px)
    p.PaddingLeft = UDim.new(0, px)
    p.PaddingRight = UDim.new(0, px)
    p.Parent = parent
    return p
end

local function list(parent, dir, gap, alignV, alignH)
    local l = Instance.new("UIListLayout")
    l.FillDirection = dir
    l.SortOrder = Enum.SortOrder.LayoutOrder
    l.Padding = UDim.new(0,gap)
    l.VerticalAlignment = alignV or Enum.VerticalAlignment.Top
    l.HorizontalAlignment = alignH or Enum.HorizontalAlignment.Left
    l.Parent = parent
    return l
end

local function applyFont(textObj, size, weight)
    textObj.Font = Typography.font
    textObj.TextSize = size * Typography.scale
    if weight == "bold" then
        -- Some executors / environments may not allow FontFace mutation; protect with pcall
        pcall(function()
            if textObj.FontFace then
                textObj.FontFace = Font.new(textObj.FontFace.Family, Enum.FontWeight.Bold, Enum.FontStyle.Normal)
            else
                -- fallback: duplicate size to visually emphasize
                textObj.TextSize = (size * Typography.scale) + 1
            end
        end)
    end
end

-- Focus Ring (keyboard accessibility) ---------------------------------------
local function attachFocusRing(button, theme)
    local ring = Instance.new("Frame")
    ring.Name = "FocusRing"
    ring.BackgroundTransparency = 1
    ring.Size = UDim2.fromScale(1,1)
    ring.Position = UDim2.fromScale(0,0)
    ring.ZIndex = button.ZIndex - 1
    ring.Parent = button
    stroke(ring, theme.accent, 2, 1) -- hidden until focused

    button.SelectionImageObject = ring
end

-- Component Factory ----------------------------------------------------------
local Components = {}

function Components.Button(theme, props)
    props = props or {}
    local btn = Instance.new("TextButton")
    btn.Name = (props.Text or "Button") .. "Button"
    btn.AutoButtonColor = false
    btn.Text = props.Text or "Button"
    btn.TextColor3 = theme.textPrimary
    btn.BackgroundColor3 = props.Transparent and theme.backgroundSecondary or theme.backgroundElevated
    btn.Size = UDim2.new(0, 140, 0, 40)
    applyFont(btn, Typography.sizes.body, "bold")
    rounded(btn, 12)
    stroke(btn, theme.stroke, 1, 0.35)
    padding(btn, 4)
    attachFocusRing(btn, theme)

    if props.Icon then
        local icon = Instance.new("ImageLabel")
        icon.Name = "Icon"
        icon.BackgroundTransparency = 1
        icon.Image = props.Icon
        icon.Size = UDim2.new(0,18,0,18)
        icon.Position = UDim2.new(0,10,0.5,0)
        icon.AnchorPoint = Vector2.new(0,0.5)
        icon.Parent = btn
        btn.TextXAlignment = Enum.TextXAlignment.Center
        btn.Text = (props.Text or "")
    end

    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217" -- soft shadow asset placeholder
    shadow.ImageColor3 = theme.shadow
    shadow.ImageTransparency = 0.9
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10,10,118,118)
    shadow.Size = UDim2.new(1,12,1,12)
    shadow.Position = UDim2.fromOffset(-6,-2)
    shadow.ZIndex = btn.ZIndex - 1
    shadow.Parent = btn

    -- Hover / Press animations
    local baseColor = btn.BackgroundColor3
    btn.MouseEnter:Connect(function()
        tween(btn, {BackgroundColor3 = baseColor:Lerp(theme.accent, 0.05)}, 0.2)
        tween(btn, {TextColor3 = theme.textPrimary}, 0.2)
        tween(shadow, {ImageTransparency = 0.82}, 0.25)
    end)
    btn.MouseLeave:Connect(function()
        tween(btn, {BackgroundColor3 = baseColor}, 0.25)
        tween(shadow, {ImageTransparency = 0.9}, 0.25)
        tween(btn, {Size = UDim2.new(0,140,0,40)}, 0.12)
    end)
    btn.MouseButton1Down:Connect(function()
        tween(btn, {Size = UDim2.new(0,134,0,38)}, 0.08)
    end)
    btn.MouseButton1Up:Connect(function()
        tween(btn, {Size = UDim2.new(0,140,0,40)}, 0.18)
    end)

    return btn
end

function Components.Card(theme, props)
    local f = Instance.new("Frame")
    f.Name = (props.Title or "Card") .. "Card"
    f.BackgroundColor3 = theme.backgroundElevated
    f.Size = UDim2.new(0, 260, 0, 130)
    f.ClipsDescendants = true
    rounded(f, 18)
    stroke(f, theme.stroke, 1, 0.4)

    local sh = Instance.new("ImageLabel")
    sh.BackgroundTransparency = 1
    sh.Image = "rbxassetid://1316045217"
    sh.ImageColor3 = theme.shadow
    sh.ImageTransparency = 0.9
    sh.ScaleType = Enum.ScaleType.Slice
    sh.SliceCenter = Rect.new(10,10,118,118)
    sh.Size = UDim2.new(1,18,1,18)
    sh.Position = UDim2.fromOffset(-9,-4)
    sh.ZIndex = 0
    sh.Parent = f

    local container = Instance.new("Frame")
    container.Name = "Content"
    container.BackgroundTransparency = 1
    container.Size = UDim2.fromScale(1,1)
    container.Parent = f
    padding(container, 14)
    list(container, Enum.FillDirection.Vertical, 4)

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextYAlignment = Enum.TextYAlignment.Top
    title.TextColor3 = theme.textPrimary
    title.Text = props.Title or "Card Title"
    applyFont(title, Typography.sizes.heading, "bold")
    title.Parent = container

    local desc = Instance.new("TextLabel")
    desc.Name = "Description"
    desc.BackgroundTransparency = 1
    desc.TextXAlignment = Enum.TextXAlignment.Left
    desc.TextYAlignment = Enum.TextYAlignment.Top
    desc.TextColor3 = theme.textSecondary
    desc.TextWrapped = true
    desc.Text = props.Description or "Description text that is concise and helpful."
    applyFont(desc, Typography.sizes.caption)
    desc.Parent = container

    -- Depth hover
    f.MouseEnter:Connect(function()
        tween(f, {BackgroundColor3 = theme.backgroundElevated:Lerp(theme.accent,0.03)}, 0.25)
        tween(sh, {ImageTransparency = 0.82}, 0.3)
    end)
    f.MouseLeave:Connect(function()
        tween(f, {BackgroundColor3 = theme.backgroundElevated}, 0.3)
        tween(sh, {ImageTransparency = 0.9}, 0.3)
    end)
    return f
end

function Components.NavBar(theme, items, onSelect)
    local bar = Instance.new("Frame")
    bar.Name = "NavBar"
    bar.Size = UDim2.new(1,0,0,60)
    bar.BackgroundColor3 = theme.backgroundSecondary
    bar.BorderSizePixel = 0
    rounded(bar, 20)
    stroke(bar, theme.stroke, 1, 0.45)
    padding(bar, 8)

    local layout = list(bar, Enum.FillDirection.Horizontal, 8, Enum.VerticalAlignment.Center, Enum.HorizontalAlignment.Center)
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Center

    local selectedName = nil
    local buttons = {}
    local function highlight(target)
        for name, b in pairs(buttons) do
            tween(b, {BackgroundColor3 = theme.backgroundSecondary}, 0.15)
            b.TextColor3 = theme.textPrimary
        end
        tween(target, {BackgroundColor3 = theme.accent}, 0.2)
        target.TextColor3 = Color3.new(1,1,1)
    end
    for i, item in ipairs(items) do
        local b = Components.Button(theme, {Text = item.Name, Transparent = true})
        b.Size = UDim2.new(1/#items, -8, 1, -8)
        b.LayoutOrder = i
        b.Parent = bar
        buttons[item.Name] = b
        b.MouseButton1Click:Connect(function()
            selectedName = item.Name
            highlight(b)
            if onSelect then
                pcall(onSelect, selectedName)
            end
        end)
        if i == 1 then
            selectedName = item.Name
            highlight(b)
        end
    end
    -- Private state (no attachment to attributes or instance fields to avoid errors)
    local function selectInternal(name)
        local b = buttons[name]
        if b then
            selectedName = name
            highlight(b)
        end
    end
    function bar.Select(name)
        selectInternal(name)
    end
    function bar.GetSelected()
        return selectedName
    end
    return bar
end

function Components.Modal(theme, props)
    local root = Instance.new("Frame")
    root.Name = "Modal"
    root.BackgroundTransparency = 1
    root.Size = UDim2.fromScale(1,1)
    root.Visible = false
    root.ZIndex = 50

    local overlay = Instance.new("TextButton")
    overlay.Name = "Overlay"
    overlay.BackgroundColor3 = Color3.fromRGB(0,0,0)
    overlay.BackgroundTransparency = 0.25
    overlay.AutoButtonColor = false
    overlay.Text = ""
    overlay.Size = UDim2.fromScale(1,1)
    overlay.Parent = root

    local panel = Instance.new("Frame")
    panel.Name = "Panel"
    panel.Size = UDim2.new(0, 380, 0, 220)
    panel.AnchorPoint = Vector2.new(0.5,0.5)
    panel.Position = UDim2.fromScale(0.5,1.1)
    panel.BackgroundColor3 = theme.backgroundElevated
    panel.Parent = root
    rounded(panel, 26)
    stroke(panel, theme.stroke, 1, 0.4)
    padding(panel, 20)
    list(panel, Enum.FillDirection.Vertical, 12)

    local title = Instance.new("TextLabel")
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextColor3 = theme.textPrimary
    title.Text = props.Title or "Modal Title"
    applyFont(title, Typography.sizes.heading, "bold")
    title.Parent = panel

    local body = Instance.new("TextLabel")
    body.BackgroundTransparency = 1
    body.TextXAlignment = Enum.TextXAlignment.Left
    body.TextYAlignment = Enum.TextYAlignment.Top
    body.Size = UDim2.new(1,0,1,-90)
    body.TextWrapped = true
    body.TextColor3 = theme.textSecondary
    body.Text = props.Body or "Body copy explaining the modal purpose."
    applyFont(body, Typography.sizes.body)
    body.Parent = panel

    local actions = Instance.new("Frame")
    actions.BackgroundTransparency = 1
    actions.Size = UDim2.new(1,0,0,44)
    actions.Parent = panel
    local actLayout = list(actions, Enum.FillDirection.Horizontal, 8)
    actLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    actLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    local cancel = Components.Button(theme, {Text = "Cancel", Transparent = true})
    cancel.Parent = actions
    local confirm = Components.Button(theme, {Text = "OK"})
    confirm.BackgroundColor3 = theme.accent
    confirm.TextColor3 = Color3.new(1,1,1)
    confirm.Parent = actions

    local function show()
        root.Visible = true
        panel.Position = UDim2.fromScale(0.5,1.1)
        panel.BackgroundTransparency = 0
        overlay.BackgroundTransparency = 1
        tween(overlay, {BackgroundTransparency = 0.25}, 0.25)
        tween(panel, {Position = UDim2.fromScale(0.5,0.5)}, 0.4, Enum.EasingStyle.Quint)
    end
    local function hide()
        tween(overlay, {BackgroundTransparency = 1}, 0.25)
        tween(panel, {Position = UDim2.fromScale(0.5,1.1)}, 0.35, Enum.EasingStyle.Quint)
        task.delay(0.36, function() root.Visible = false end)
    end

    cancel.MouseButton1Click:Connect(hide)
    overlay.MouseButton1Click:Connect(hide)
    confirm.MouseButton1Click:Connect(function()
        hide()
    end)

    return root, {show = show, hide = hide}
end

-- Hub Mount ------------------------------------------------------------------
local Hub = {}
Hub._mounted = false
Hub._mode = "light"
Hub._connections = {}
Hub._instances = {}
Hub._themeListeners = {}
Hub._reducedMotion = Prefs.data.reducedMotion or false
Hub._visible = true
Hub._cards = {}
Hub._navListeners = {}

function Hub.onNavigate(cb)
    if type(cb) == "function" then table.insert(Hub._navListeners, cb) end
end

function Hub._navigate(name)
    -- Fire callbacks
    for _, cb in ipairs(Hub._navListeners) do pcall(cb, name) end
    -- Panel switching
    local panels = Hub._instances.panels
    if panels then
        for panelName, frame in pairs(panels) do
            frame.Visible = (panelName == name)
        end
    end
end

function Hub.onThemeChanged(cb)
    if type(cb) == "function" then
        table.insert(Hub._themeListeners, cb)
    end
end

function Hub.setReducedMotion(b)
    Hub._reducedMotion = not not b
    Prefs.data.reducedMotion = Hub._reducedMotion
    savePrefs()
end

function Hub.setScale(scale)
    if type(scale) == "number" and scale > 0.3 and scale < 3 then
        Typography.scale = scale
        Prefs.data.scale = scale
        savePrefs()
        -- reapply text sizes
        if Hub._instances.gui then
            for _, inst in ipairs(Hub._instances.gui:GetDescendants()) do
                if inst:IsA("TextLabel") or inst:IsA("TextButton") then
                    -- naive approach: detect by Role or fallback body size
                    local role = roleMap[inst]
                    local size = Typography.sizes.body
                    if role == "Title" then size = Typography.sizes.title
                    elseif role == "Secondary" then size = Typography.sizes.body
                    end
                    inst.TextSize = size * Typography.scale
                end
            end
        end
    end
end

function Hub.toggleVisibility()
    if not Hub._instances.gui then return end
    Hub._visible = not Hub._visible
    Hub._instances.gui.Enabled = Hub._visible
end

function Hub.show() if Hub._instances.gui then Hub._instances.gui.Enabled = true; Hub._visible = true end end
function Hub.hide() if Hub._instances.gui then Hub._instances.gui.Enabled = false; Hub._visible = false end end

local function applyTheme(root, theme)
    for _, inst in ipairs(root:GetDescendants()) do
        if inst:IsA("TextLabel") or inst:IsA("TextButton") then
            if inst.Name ~= "Shadow" then
                local role = roleMap[inst]
                if role == "Title" then
                    inst.TextColor3 = theme.textPrimary
                elseif role == "Secondary" then
                    inst.TextColor3 = theme.textSecondary
                elseif role == "Accent" then
                    inst.TextColor3 = theme.accent
                else
                    inst.TextColor3 = inst.TextColor3 or theme.textPrimary
                end
            end
        elseif inst:IsA("Frame") or inst:IsA("ScrollingFrame") then
            local layer = layerMap[inst]
            if layer == "Base" then
                inst.BackgroundColor3 = theme.backgroundPrimary
            elseif layer == "Elevated" then
                inst.BackgroundColor3 = theme.backgroundElevated
            elseif layer == "Secondary" then
                inst.BackgroundColor3 = theme.backgroundSecondary
            end
        elseif inst:IsA("UIStroke") then
            inst.Color = theme.stroke
        end
    end
end

function Hub.toggleDarkMode()
    Hub._mode = (Hub._mode == "light" and "dark" or "light")
    local gui = Hub._instances.gui
    if gui then
        applyTheme(gui, Themes[Hub._mode])
        Prefs.data.theme = Hub._mode
        savePrefs()
        for _, cb in ipairs(Hub._themeListeners) do
            pcall(cb, Hub._mode)
        end
    end
end

function Hub.mount(parent)
    if Hub._mounted then return Hub end
    Hub._mounted = true
    local ui = Instance.new("ScreenGui")
    ui.Name = "AppleHubUI"
    ui.ResetOnSpawn = false
    ui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ui.IgnoreGuiInset = true
    ui.Parent = parent or (LocalPlayer:FindFirstChildOfClass("PlayerGui") or LocalPlayer:WaitForChild("PlayerGui"))

    Hub._instances.gui = ui

    -- Root base
    local root = Instance.new("Frame")
    root.Name = "Root"
    root.Size = UDim2.fromScale(1,1)
    root.BackgroundColor3 = Themes.light.backgroundPrimary
    -- mark layer (no SetAttribute for executor compatibility)
    markLayer(root, "Base")
    root.Parent = ui

    -- Scrollable content area
    -- Panel container
    local panelContainer = Instance.new("Frame")
    panelContainer.Name = "Panels"
    panelContainer.BackgroundTransparency = 1
    panelContainer.Size = UDim2.new(1,0,1,-80)
    panelContainer.Parent = root

    -- HOME panel (existing content becomes Home)
    local content = Instance.new("ScrollingFrame")
    content.Name = "Home"
    content.BackgroundTransparency = 1
    content.Size = UDim2.fromScale(1,1)
    content.CanvasSize = UDim2.new(0,0,0,0)
    content.ScrollBarThickness = 4
    content.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    content.Parent = panelContainer
    list(content, Enum.FillDirection.Vertical, 16)
    padding(content, 24)

    -- SCRIPTS panel
    local scriptsPanel = Instance.new("ScrollingFrame")
    scriptsPanel.Name = "Scripts"
    scriptsPanel.BackgroundTransparency = 1
    scriptsPanel.Size = UDim2.fromScale(1,1)
    scriptsPanel.ScrollBarThickness = 4
    scriptsPanel.Visible = false
    scriptsPanel.Parent = panelContainer
    list(scriptsPanel, Enum.FillDirection.Vertical, 12)
    padding(scriptsPanel, 24)
    local scriptsHeader = Instance.new("TextLabel")
    scriptsHeader.BackgroundTransparency = 1
    scriptsHeader.TextXAlignment = Enum.TextXAlignment.Left
    scriptsHeader.Text = "Scripts"
    markRole(scriptsHeader, "Title")
    applyFont(scriptsHeader, Typography.sizes.title, "bold")
    scriptsHeader.Parent = scriptsPanel
    local scriptsNote = Instance.new("TextLabel")
    scriptsNote.BackgroundTransparency = 1
    scriptsNote.TextXAlignment = Enum.TextXAlignment.Left
    scriptsNote.TextWrapped = true
    scriptsNote.Text = "Add your script cards programmatically via Hub.addCard() or a future loader."
    scriptsNote.TextColor3 = Themes.light.textSecondary
    applyFont(scriptsNote, Typography.sizes.body)
    scriptsNote.Parent = scriptsPanel

    -- SETTINGS panel
    local settingsPanel = Instance.new("ScrollingFrame")
    settingsPanel.Name = "Settings"
    settingsPanel.BackgroundTransparency = 1
    settingsPanel.Size = UDim2.fromScale(1,1)
    settingsPanel.ScrollBarThickness = 4
    settingsPanel.Visible = false
    settingsPanel.Parent = panelContainer
    list(settingsPanel, Enum.FillDirection.Vertical, 14)
    padding(settingsPanel, 24)
    local settingsHeader = Instance.new("TextLabel")
    settingsHeader.BackgroundTransparency = 1
    settingsHeader.TextXAlignment = Enum.TextXAlignment.Left
    settingsHeader.Text = "Settings"
    markRole(settingsHeader, "Title")
    applyFont(settingsHeader, Typography.sizes.title, "bold")
    settingsHeader.Parent = settingsPanel

    local scaleLabel = Instance.new("TextLabel")
    scaleLabel.BackgroundTransparency = 1
    scaleLabel.TextXAlignment = Enum.TextXAlignment.Left
    scaleLabel.Text = "Scale: " .. tostring(Typography.scale)
    applyFont(scaleLabel, Typography.sizes.body)
    scaleLabel.Parent = settingsPanel

    local scaleUp = Components.Button(Themes.light, {Text = "+"})
    scaleUp.Size = UDim2.new(0,50,0,40)
    scaleUp.Parent = settingsPanel
    scaleUp.MouseButton1Click:Connect(function()
        Hub.setScale(math.min(Typography.scale + 0.05, 2))
        scaleLabel.Text = "Scale: " .. string.format("%.2f", Typography.scale)
    end)
    local scaleDown = Components.Button(Themes.light, {Text = "-", Transparent = true})
    scaleDown.Size = UDim2.new(0,50,0,40)
    scaleDown.Parent = settingsPanel
    scaleDown.MouseButton1Click:Connect(function()
        Hub.setScale(math.max(Typography.scale - 0.05, 0.5))
        scaleLabel.Text = "Scale: " .. string.format("%.2f", Typography.scale)
    end)

    local motionToggle = Components.Button(Themes.light, {Text = Hub._reducedMotion and "Enable Motion" or "Reduce Motion", Transparent = true})
    motionToggle.Parent = settingsPanel
    motionToggle.MouseButton1Click:Connect(function()
        Hub.setReducedMotion(not Hub._reducedMotion)
        motionToggle.Text = Hub._reducedMotion and "Enable Motion" or "Reduce Motion"
    end)

    Hub._instances.panels = {
        Home = content,
        Scripts = scriptsPanel,
        Settings = settingsPanel,
    }

    -- Section: Hero / Title
    local header = Instance.new("TextLabel")
    header.Name = "HubTitle"
    header.BackgroundTransparency = 1
    header.TextXAlignment = Enum.TextXAlignment.Left
    header.Text = "Apple Themed Hub"
    markRole(header, "Title")
    applyFont(header, Typography.sizes.title, "bold")
    header.Parent = content

    local subtitle = Instance.new("TextLabel")
    subtitle.BackgroundTransparency = 1
    subtitle.TextXAlignment = Enum.TextXAlignment.Left
    subtitle.Text = "A minimal, modular interface." 
    markRole(subtitle, "Secondary")
    applyFont(subtitle, Typography.sizes.body)
    subtitle.Parent = content

    -- Card Grid
    local gridHolder = Instance.new("Frame")
    gridHolder.BackgroundTransparency = 1
    gridHolder.Size = UDim2.new(1,0,0,300)
    gridHolder.Parent = content

    local gridLayout = Instance.new("UIGridLayout")
    gridLayout.CellPadding = UDim2.new(0,16,0,16)
    gridLayout.CellSize = UDim2.new(0,260,0,130)
    gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
    gridLayout.FillDirectionMaxCells = 4
    gridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    gridLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    gridLayout.Parent = gridHolder

    local cardsInfo = {
        {Title = "Scripts", Description = "Browse and manage scripts."},
        {Title = "Settings", Description = "Adjust preferences & theme."},
        {Title = "Account", Description = "Profile and session data."},
        {Title = "About", Description = "Version + credits."},
    }
    for _, info in ipairs(cardsInfo) do
        local c = Components.Card(Themes.light, info)
        c.Parent = gridHolder
    end

    -- Actions row
    local actionsRow = Instance.new("Frame")
    actionsRow.BackgroundTransparency = 1
    actionsRow.Size = UDim2.new(1,0,0,50)
    actionsRow.Parent = content
    local actionsLayout = list(actionsRow, Enum.FillDirection.Horizontal, 12)
    actionsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    actionsLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    local toggleModeBtn = Components.Button(Themes.light, {Text = "Toggle Theme"})
    toggleModeBtn.Parent = actionsRow
    toggleModeBtn.MouseButton1Click:Connect(function()
        Hub.toggleDarkMode()
    end)

    local openModalBtn = Components.Button(Themes.light, {Text = "Open Modal", Transparent = true})
    openModalBtn.Parent = actionsRow

    -- Modal
    local modal, modalApi = Components.Modal(Themes.light, {Title = "Hello", Body = "This is a sample modal dialog with smooth animation."})
    modal.Parent = root
    openModalBtn.MouseButton1Click:Connect(function()
        modalApi.show()
    end)

    -- Bottom NavBar
    local nav = Components.NavBar(Themes.light, {
        {Name = "Home"},
        {Name = "Scripts"},
        {Name = "Settings"},
    }, function(name)
        Hub._navigate(name)
    end)
    nav.AnchorPoint = Vector2.new(0.5,1)
    nav.Position = UDim2.new(0.5,0,1,-10)
    nav.Parent = root
    Hub._instances.nav = nav

    function Hub.selectNav(name)
        if Hub._instances.nav and Hub._instances.nav.Select then
            Hub._instances.nav:Select(name)
        end
    end

    -- Responsive adjust (simple)
    local function adjust()
        local w = root.AbsoluteSize.X
        if w < 900 then
            gridLayout.FillDirectionMaxCells = 2
        elseif w < 1200 then
            gridLayout.FillDirectionMaxCells = 3
        else
            gridLayout.FillDirectionMaxCells = 4
        end
    end
    table.insert(Hub._connections, root:GetPropertyChangedSignal("AbsoluteSize"):Connect(adjust))
    adjust()

    -- Keyboard theme toggle (Cmd/Ctrl + Shift + L)
    table.insert(Hub._connections, UserInputService.InputBegan:Connect(function(inp, gp)
        if gp then return end
        local mod = UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) or UserInputService:IsKeyDown(Enum.KeyCode.LeftMeta)
        if mod and UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) and inp.KeyCode == Enum.KeyCode.L then
            Hub.toggleDarkMode()
        end
    end))

    -- Set initial theme (persisted)
    Hub._mode = Prefs.data.theme == "dark" and "dark" or "light"
    applyTheme(ui, Themes[Hub._mode])

    -- Dynamic CanvasSize update
    local contentLayout = content:FindFirstChildOfClass("UIListLayout")
    if contentLayout then
        local function updateCanvas()
            local abs = contentLayout.AbsoluteContentSize
            content.CanvasSize = UDim2.new(0,0,0, abs.Y + 40)
        end
        table.insert(Hub._connections, contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvas))
        updateCanvas()
    end

    -- Card addition API
    function Hub.addCard(info)
        if not info or type(info) ~= "table" then return end
        -- Default to Home panel for now
        local targetParent = gridHolder
        if info.Panel and Hub._instances.panels[info.Panel] then
            -- attach to panel root if no grid there
            targetParent = Hub._instances.panels[info.Panel]
        end
        local c = Components.Card(Themes[Hub._mode], {Title = info.Title, Description = info.Description})
        c.Parent = targetParent
        table.insert(Hub._cards, c)
        return c
    end

    -- Keybind for visibility toggle (RightControl)
    table.insert(Hub._connections, UserInputService.InputBegan:Connect(function(inp, gp)
        if gp then return end
        if inp.KeyCode == Enum.KeyCode.RightControl then
            Hub.toggleVisibility()
        end
    end))
    return Hub
end

function Hub.unmount()
    if not Hub._mounted then return end
    for _, c in ipairs(Hub._connections) do pcall(function() c:Disconnect() end) end
    Hub._connections = {}
    if Hub._instances.gui then Hub._instances.gui:Destroy() end
    Hub._instances = {}
    Hub._mounted = false
    Hub._themeListeners = {}
    Hub._cards = {}
    Hub._navListeners = {}
end

return Hub
